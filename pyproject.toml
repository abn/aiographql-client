[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "aiographql-client"
packages = [
    { include = "aiographql", from = "src" }
]
version = "1.1.0-alpha.0"
description = "An asyncio GraphQL client built on top of aiohttp and graphql-core-next"
authors = [
    "Arun Neelicattu <arun.neelicattu@gmail.com>"
]
license = "MIT"
readme = "README.md"
repository = "https://github.com/abn/aiographql-client"
keywords = [
    "aiohttp",
    "asyncio",
    "client",
    "graphql",
    "graphql-core",
    "graphql-core-next",
]
classifiers = [
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Framework :: AsyncIO"
]

[tool.poetry.dependencies]
python = "^3.8"
cafeteria-asyncio = "^0.3"
aiohttp = "^3.5"
graphql-core = "^3.0"
ujson = ">=2"

[tool.poetry.dev-dependencies]
coverage = { version = "^7.4", extras = ["toml"]}
pytest = "^8.0"
pytest-asyncio = "^0.23"
pytest-cov = "^4.1"
pytest-mock = "^3.12"

[tool.black]
line-length = 88

[tool.isort]
profile = "black"
src_paths = ["src", "test"]
known_first_party = "aiographql"

[tool.pytest.ini_options]
minversion = "6.0"
asyncio_mode = "auto"
addopts = "--cov --cov-append --cov-report=term"
testpaths = [
    "tests",
]

[tool.coverage.run]
branch = true
parallel = true
data_file = ".coverage/data"
source = [
    "aiographql",
]
omit = [
    "tests/*",
]

[tool.coverage.paths]
source = [
    "src",
]

[tool.coverage.report]
skip_empty = true
ignore_errors = true

# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.coverage.html]
directory = ".coverage/html"

[tool.coverage.xml]
output = ".coverage/coverage.xml"

[tool.coverage.json]
output = ".coverage/coverage.json"
