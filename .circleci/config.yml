version: 2.1
jobs:
  black:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run:
          name: ensure black
          command: |
            pip install --user black
            ~/.local/bin/black --check ./aiographql ./tests

  lint:
    docker:
      - image: circleci/python:3.7
    resource_class: small
    steps:
      - checkout
      - run:
          name: ensure flake8
          command: |
            pip install --user flake8
            ~/.local/bin/flake8 aiographql ./tests

  test:
    docker:
      - image: circleci/python:3.7
      - image: docker.io/postgres:9.6-alpine
        environment:
          POSTGRES_PASSWORD: hasura
          POSTGRES_USER: hasura
          POSTGRES_DB: hasura
      - image: quay.io/twyla-ai/hasura-world-db:latest
        environment:
          HASURA_GRAPHQL_DATABASE_URL: postgres://hasura:hasura@127.0.0.1:5432/hasura
          HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
          HASURA_GRAPHQL_ADMIN_SECRET: secret
        entrypoint: /bin/sh
        command:
          - -c
          - "sed -i s/'nc localhost'/'nc -z localhost'/g /bin/docker-entrypoint.sh; sed -i s/'hasura-cli'/'hasura-cli --skip-update-check'/g /bin/docker-entrypoint.sh; echo -n 'Waiting for postgres '; until nc -z 127.0.0.1 5432 >/dev/null 2>&1; do echo -n .; sleep 2s; done; echo ' DONE'; source docker-entrypoint.sh graphql-engine serve"
    steps:
      - checkout
      - restore_cache:
          keys:
            - python-{{ checksum "poetry.lock" }}
      - run:
          name: install test dependencies
          command: |
            pip install --user --upgrade poetry tox tox-venv wait-for-port
      - run:
          name: wait for hasura api server
          command: |
            ~/.local/bin/wait-for-port -t 3 -r 15 -s 5 -v 127.0.0.1 8080
      - run:
          name: run tests
          command: |
            ~/.local/bin/tox
      - persist_to_workspace:
          root: coverage
          paths:
            - html
            - coverage.xml
      - store_artifacts:
          path: coverage
      - save_cache:
          key: python-{{ checksum "poetry.lock" }}
          paths:
            - ~/project/.tox
            - ~/.cache/pip

  wheel:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run:
          name: build python wheel
          command: |
            pip install poetry
            poetry build

  publish:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run:
          name: publish python wheel
          command: |
            pip install poetry
            poetry config http-basic.pypi "@token" "${PYPI_API_TOKEN}"
            poetry publish --build

workflows:
  ci-checks:
    jobs:
      - black
      - lint
      - test
      - wheel
  release:
    jobs:
      - publish:
          name: publish-release-package
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
